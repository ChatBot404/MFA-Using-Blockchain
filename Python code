from web3 import Web3
import hashlib
import random
import time

# Connect to the Ethereum blockchain (e.g., local Ganache or an Ethereum testnet)
web3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))  # Replace with your provider
contract_address = "0xYourSmartContractAddress"  # Replace with your contract address
abi = [  # Replace with your contract ABI
    {
        "inputs": [
            {"internalType": "string", "name": "_username", "type": "string"},
            {"internalType": "string", "name": "_password", "type": "string"}
        ],
        "name": "authenticate",
        "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {"internalType": "string", "name": "_name", "type": "string"},
            {"internalType": "string", "name": "_phoneNumber", "type": "string"},
            {"internalType": "string", "name": "_email", "type": "string"},
            {"internalType": "string", "name": "_username", "type": "string"},
            {"internalType": "string", "name": "_password", "type": "string"}
        ],
        "name": "registerUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
]

contract = web3.eth.contract(address=contract_address, abi=abi)

# Example account to send transactions
web3.eth.default_account = web3.eth.accounts[0]


def hash_password(password, salt):
    """Hash the password with a unique salt."""
    return hashlib.sha256(f"{salt}{password}".encode()).hexdigest()


def generate_otp():
    """Generate a 6-digit random OTP."""
    return random.randint(100000, 999999)


def register_user(name, phone_number, email, username, password):
    """Register a new user."""
    salt = str(time.time())  # Use timestamp as a unique salt
    hashed_password = hash_password(password, salt)
    tx = contract.functions.registerUser(name, phone_number, email, username, hashed_password).transact()
    web3.eth.wait_for_transaction_receipt(tx)
    print("User registered successfully!")


def authenticate_user(username, password, otp):
    """Authenticate the user."""
    hashed_username = hashlib.sha256(username.encode()).hexdigest()
    hashed_password = hash_password(password, hashed_username)
    otp_generated = generate_otp()  # Simulate OTP for demo purposes
    print(f"Generated OTP: {otp_generated}")

    if otp == otp_generated:
        success = contract.functions.authenticate(username, hashed_password).call()
        if success:
            print("Authentication successful!")
        else:
            print("Authentication failed: Invalid username or password.")
    else:
        print("Authentication failed: Incorrect OTP.")


# Example usage
if __name__ == "__main__":
    # Register a user
    register_user(
        name="John Doe",
        phone_number="1234567890",
        email="john.doe@example.com",
        username="johndoe",
        password="securepassword123"
    )

    # Authenticate the user
    otp = int(input("Enter the OTP sent to your device: "))  # For demonstration
    authenticate_user(username="johndoe", password="securepassword123", otp=otp)
